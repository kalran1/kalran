#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

const char* ssid = "iptimewoorijip"; // 와이파이 AP, 또는 스마트폰의 핫스판 이름
const char* password = "ssw963852741**";  // 와이파이 AP, 또는 스마트폰의 핫스판 이름
const char* mqtt_server = "broker.mqtt-dashboard.com"; //브로커 주소
const char* outTopic = "syw1"; // 이름이 중복되지 않게 설정 기록
const char* inTopic = "syw2"; // 이름이 중복되지 않게 설정 기록
const char* clientName = "";  // setup 함수에서 자동생성
String sChipID;
char cChipID[20];

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[255];

//ball switch inputs
int d2=D2;  //Digital Input

//rgb smd
int d5=D5;      //B
int d6=D6;      //R
int d7=D7;      //G

String encdir ="";


//json을 위한 설정
StaticJsonDocument<200> doc;
DeserializationError error;
JsonObject root;



void setup()
{
   Serial.begin(115200); // 시리얼 통신 초기화
   Serial.println("Rotary Encoders");
   setup_wifi();
   delay(1000);
   pinMode(d2, INPUT);
   //pinMode(d4, INPUT);
   pinMode(d5, OUTPUT);
   pinMode(d6, OUTPUT);
   pinMode(d7, OUTPUT);

  //이름 자동으로 생성
  sChipID=String(ESP.getChipId(),HEX);
  sChipID.toCharArray(cChipID,sChipID.length()+1);
  clientName=&cChipID[0];
  Serial.println(clientName);

  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

 
}


void setup_wifi() {
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// 통신에서 문자가 들어오면 이 함수의 payload 배열에 저장된다.
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  
  String s;
  deserializeJson(doc,payload);
  root = doc.as<JsonObject>();

}

 
 
 


// mqtt 통신에 지속적으로 접속한다.
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(clientName)) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(outTopic, "Reconnected");
      // ... and resubscribe
      client.subscribe(inTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}



void loop(){
    if (!client.connected()) {
    reconnect();
  }
  client.loop();
   
   if(digitalRead(d2)==0)
    {
      encdir="safe";
      digitalWrite(d5,255); //B
      digitalWrite(d6,0);   //R
      digitalWrite(d7,0);   //G

      sprintf(msg,"safe %d",d2);
    }
    else
    {
      encdir="danger";
      digitalWrite(d5,0);   //B
      digitalWrite(d6,255); //R
      digitalWrite(d7,0);   //G

      sprintf(msg,"danger %d",d2);
    }
   
     delay(1000);
     Serial.println(msg);
     client.publish(outTopic, msg);
}
